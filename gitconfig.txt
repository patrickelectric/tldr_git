[color]
   ui = true

[core]
   editor = nano
   # pager = diff-so-fancy | less --tabs=4 -RFX

[delta]
    features = decorations
    whitespace-error-style = 22 reverse

[delta "decorations"]
    plus-style = syntax
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none


[url "https://github.com/"]
   insteadOf = github:

[url "https://github.com/"]
   insteadOf = github-dev:
[url "git@github.com:"]
    pushInsteadOf = github-dev:

[url "https://github.com/patrickelectric/"]
   insteadOf = eu:
[url "git@github.com:patrickelectric/"]
   pushInsteadOf = eu:

[url "https://github.com/bluerobotics/"]
   insteadOf = blue:

[url "https://anongit.kde.org/"]
    insteadOf = kde:
[url "git@git.kde.org:"]
    pushInsteadOf = kde:

[alias]
   # Avoid git git commands
   git = !git

   # I have problems
   ck = checkout

   # Create a branch from a github remote, using the PR number and the remote name
   # git pr remote_name pr_number branch_name extra_args
   pr = "!f() { \
      BRANCH=${3:-\"pr_$2\"}; \
      git fetch $1 pull/$2/head:$BRANCH; \
      git checkout $BRANCH; \
      git log master..$BRANCH --oneline; \
   }; f"

   # Commit each file in a commit with $file_without_extension: $1
   # git commit-each-file "my message"
   commit-each-file = "!f() { \
      for i in $(git ls-files -m); do \
         git add \"$i\"; \
         FILE=$(basename -- $i); \
         git commit -sm \"${FILE%.*}: $1\"; \
      done \
   }; f"

   # git cloneorg org
   cloneorg = "!f() { \
       ORG_URL=\"https://api.github.com/orgs/$1/repos?per_page=200\"; \
       ALL_REPOS=$(curl -s ${ORG_URL} | grep html_url | awk 'NR%2 == 0' | cut -d ':' -f 2-3 | tr -d '\",\"'); \
       for ORG_REPO in ${ALL_REPOS}; do git clone ${ORG_REPO}.git; done; \
   }; f"

   # List branchs by age
   branch-by-age = for-each-ref --sort=committerdate refs/heads/ --format='%(authordate) \t %(refname:short)'

   # git fix-old number
   # Will apply a fixup in the n-old commit
   fix-old = "!f() { git commit --fixup=$(git rev-parse HEAD~$(($1-1))); }; f"

   # git update
   # Save branch with name-time and get the new branch from origin with the same name
   update = "!f() { \
      NAME=$(git symbolic-ref --short HEAD); \
      TIME=$(git log -1 --date=format:"%Y-%m-%d-%H-%M-%S" --format=%ad); \
      NEW_NAME=$NAME-$TIME; \
      git branch -m $NAME-$TIME; \
      git checkout $NAME; \
      echo "Saving old branch as $NEW_NAME"; \
   }; f"


   # git contributions
   contributions = shortlog -sne

   stats = "!f() { \
     status=$(git status --porcelain); \
     IFS=$'\\n'; \
     for line in $status; do \
         file=${line:3}; \
         case ${line:0:2} in \
         \" M\") \
             echo -e \"\\e[31m󱠡 $file\\e[0m\" \
             ;; \
         \"M \") \
             echo -e \"\\e[32m $file\\e[0m\" \
             ;; \
         \"??\") \
             echo -e \"\\e[33m󱁏 $file\\e[0m\" \
             ;; \
         esac; \
     done; \
   }; f"


[user]
    email = patrickelectric@gmail.com
    name = Patrick José Pereira

[rebase]
    autosquash = true

[tig]
    diff-highlight = false

[credential]
    helper = cache --timeout 7200
